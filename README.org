* (clojureism)
The point of this small libriary is to mimic clojure's basic operations on data structures with guile scheme as close as possible because author find them usefull and miss them a lot using Guile Scheme.

The structures are:
- vector [clojure] <-> vector [scheme]
- hash-map [clojure] <-> srfi-125* hash-table [scheme]
- atom [clojure] <-> ice-9 atomic [scheme]

The operations are:
- get, get-in (vector, hash-table)
- assoc, assoc-in (vector, hash-table)
- update, update-in (vector, hash-table)
- ref, swap!, reset! (atomic)
- bonuses:
  + clojure-alike hash-table printer (it's enabled by default when requiring ~(clojureism)~ module)
  + fast ~hash-table-compare~ in ~(clojureism hash-table)~

The main difference is that in get/get-in procedures ~#f~ will be returned instead of ~nil~.
** TODOS
*** TODO Watches for atomic: ~add-watch~, ~remove-watch~,
** On guile scheme hashtables
Guile Scheme has at least 3 hash-tables realizations:
- built-in
- [[https://gitlab.com/spritely/guile-hoot/-/blob/main/lib/hoot/hashtables.scm][(hoot hashtables)]]
- srfi-69
- srfi-125

Srfi-125 one is the most advanced. at least it has built'in hash-table comparator ~hash-table=?~, while others don't. That's why it was chosen for the hash-table. Other ones can be added in next versions.
